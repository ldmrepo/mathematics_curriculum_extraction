# 프로덕션용 Docker Compose
version: '3.8'

services:
  # PostgreSQL - 프로덕션 설정
  postgres:
    image: postgres:15-alpine
    container_name: kg_postgres_prod
    environment:
      POSTGRES_DB: mathematics_curriculum
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - /backup/postgres:/backup:rw
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d mathematics_curriculum"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - kg_network_prod

  # Neo4j - 프로덕션 설정
  neo4j:
    image: neo4j:5.15-enterprise
    container_name: kg_neo4j_prod
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_PLUGINS: '["apoc","graph-data-science"]'
      NEO4J_dbms_memory_heap_initial__size: 2G
      NEO4J_dbms_memory_heap_max__size: 4G
      NEO4J_dbms_memory_pagecache_size: 2G
      NEO4J_dbms_jvm_additional: "-Dfile.encoding=UTF-8"
      NEO4J_dbms_backup_enabled: "true"
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    volumes:
      - neo4j_data_prod:/data
      - neo4j_logs_prod:/logs
      - /backup/neo4j:/backup:rw
    restart: always
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - kg_network_prod

  # Redis - 프로덕션 설정
  redis:
    image: redis:7-alpine
    container_name: kg_redis_prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
      - ./database/redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - kg_network_prod

  # Nginx - 리버스 프록시 (선택사항)
  nginx:
    image: nginx:alpine
    container_name: kg_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - postgres
      - neo4j
      - redis
    restart: always
    networks:
      - kg_network_prod

networks:
  kg_network_prod:
    driver: bridge
    name: knowledge_graph_prod_network

volumes:
  postgres_data_prod:
    driver: local
    name: kg_postgres_data_prod
  neo4j_data_prod:
    driver: local
    name: kg_neo4j_data_prod
  neo4j_logs_prod:
    driver: local
    name: kg_neo4j_logs_prod
  redis_data_prod:
    driver: local
    name: kg_redis_data_prod
